#!/usr/bin/env node

const nopt = require('nopt');
const path = require('path');

const { FetchEnvs, MockController } = require('@razee/razeedeploy-core');
const IOUtils = require('../src/IOUtils');
const LocalMustacheTemplateController = require('../src/LocalMustacheTemplateController');

const args = nopt(
  {
    mtp: path,
    out: path,
    env: [path, Array]
  },
  {}, process.argv, 2
);

if (args.mtp === undefined) {
  console.error("exactly one --mtp is required!");
  process.exit(1);
}

if (args.env === undefined || args.env.length < 1) {
  console.error("at least one --env is required!");
  process.exit(1);
}

async function renderLocal() {
  const mtp = await IOUtils.readYamlFile(args.mtp);
  const kubeData = await IOUtils.kubeDataFromYamlFiles(...args.env);

  const eventData = {
    type: 'ADDED',
    object: mtp[0]
  }

  const fetchEnvs = new FetchEnvs(new MockController(eventData, kubeData));
  const view = await fetchEnvs.get('spec');

  const mtpController = new LocalMustacheTemplateController({eventData: eventData, kubeData: kubeData});
  let templates = mtpController.concatTemplates();
  await mtpController.processTemplate(templates, view);

  if (templates.length > 1) {
    throw Error("can only handle one template!");
  }

  if (args.out === undefined) {
    await IOUtils.printYaml(templates[0]);
  } else {
    await IOUtils.writeYamlFile(templates[0], args.out)
  }
};

renderLocal();
